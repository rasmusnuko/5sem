
Copyright (C) 2019
Kim Skak Larsen
All rights reserved.
License: GNU GPLv3

Description: A compiler is implemented. The implementation is meant for
teaching purposes. The goal is to illustrate important compiler
techniques in a simple setting and to enable the students to make
minor adjustments and extensions. The source language is a simple
imperative language with integers being the only type, but including
expressions, assignments, control structures, and function definitions
and calls, including recursion and static nested scope. The target
language is 64 bit X86 Assembly/GAS Syntax. The discussions below
refer to the use of this software in a linux environment.

The compiler is written in python3, developed using Python 3.6.7, and
the ply package version 3.11.

Attempts were made to follow the PEP 8 style guide for python code
and verify this via flake8, using the command

python3 -m flake8 --exclude parsetab.py *.py

parsetab.py is generated by the ply package and does not conform to
PEP 8. Due to conditions in the same package, a few lines in
lexer_parser.py are longer than recommended.

On command line, the command can be run as

PROMPT: ./compiler.py < test_file.src

Or prefixed with python3 if compiler.py does not have execution
permissions.

Output is sent to stdout. Thus, to run the compiled programs, one
possible command sequence is:

PROMPT: ./compiler < test_file.src > assembler_file.s
PROMPT: gcc assembler_file.s
PROMPT: ./a.out

If this is not working (and probably also if it is working), it might
be good to check with the (brief) documentation for options as to how
the compiler and the generated code can be run on different platforms.

A small collection of tests programs are available in the test
directory.

If the input program is bugged, the first detected error is
reported and compilation is terminated.

The name 'scil' is an acronym for "A simple compiler in a
learning environment".
